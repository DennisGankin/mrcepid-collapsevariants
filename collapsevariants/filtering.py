import dxpy
import pandas as pd

from pathlib import Path
from typing import Tuple

from collapsevariants.tool_parsers.bolt_parser import parse_filters_BOLT, check_vcf_stats
from collapsevariants.tool_parsers.saige_parser import parse_filters_SAIGE
from collapsevariants.tool_parsers.staar_parser import STAARParser, STAARMergingException
from general_utilities.job_management.command_executor import CommandExecutor
from general_utilities.mrc_logger import MRCLogger

LOGGER = MRCLogger(__name__).get_logger()


def filter_bgen(file_prefix: str, chromosome: str, chrom_bgen_index: dict, cmd_exec: CommandExecutor) -> Tuple[int, str, pd.DataFrame]:
    """Helper method for running separate BGENs through the collapsing process (returns function as a future).

    This method just works through all possible formatting methods (for BOLT, SAIGE, and STAAR) to generate a final
    suite of files for input to the runassociationtesting burden testing suite. These files are:

    1. A BOLT-ready .bgen and .sample file
    2. A SAIGE/REGENIE-ready .bcf, bcf.csi (index), and groupFile
    3. A STAAR-ready sparse matrix saved in .rds format and a .tsv containing variant information

    :param file_prefix: A name to append to beginning of output files.
    :param chromosome: The chromosome currently being processed. This must be the short form of the chromosome name
        (e.g., '1' not 'chr1').
    :param chrom_bgen_index: a BGENIndex TypedDict containing information on filepaths containing filtered & annotated
        variants.
    :param cmd_exec: A CommandExecutor instance to run commands on the Docker container.
    :return: A Tuple containing the total number of variants found for this chromosome after filtering, the chromosome
        ID, and a pandas.DataFrame containing per-sample and per-ENST totals for log reporting purposes.
    """

    # Ingest the filtered BGEN file into this instance
    LOGGER.info(f'Processing bgen: {chromosome}.filtered.bgen')
    bgenprefix = f'filtered_bgen/chr{chromosome}.filtered'  # Get a prefix name for all files

    # Download the requisite files for this chromosome according to the index dict:
    dxpy.download_dxfile(dxpy.DXFile(chrom_bgen_index['index']).get_id(), f'{bgenprefix}.bgen.bgi')
    dxpy.download_dxfile(dxpy.DXFile(chrom_bgen_index['sample']).get_id(), f'{bgenprefix}.sample')
    dxpy.download_dxfile(dxpy.DXFile(chrom_bgen_index['bgen']).get_id(), f'{bgenprefix}.bgen')

    # Run filtering according to the user-provided filtering expression
    # Also gets the total number of variants retained for this chromosome
    num_variants = run_filtering(bgenprefix, chromosome, file_prefix, cmd_exec)
    LOGGER.info(f'Identified {num_variants} variants that match the given filtering expression in file '
                f'{file_prefix}.{chromosome}.bgen')

    # If there are no variants we need to create an empty dummy pd.DataFrame to signify that this process completed BUT
    # that no variants were found
    if num_variants == 0:
        LOGGER.warning(f'No files found for chromosome {chromosome}, excluding from final files...')
        return num_variants, chromosome, pd.DataFrame()
    else:
        # Here we are then taking the file generated by run_filtering() and generating various text/plink/vcf files
        # to generate a merged set of variants we want to test across all VCF files and that will be used as part of
        # mrcepid-mergecollapsevariants.
        #
        # JUST TO BE CLEAR â€“ the names of the functions here are not THAT important (e.g., files generated in the
        # function parse_filters_BOLT() will be used for other tools/workflows). It was just for me (Eugene Gardner)
        # to keep things organised when writing this code
        genes, snp_gene_map = parse_filters_SAIGE(file_prefix, chromosome)

        poss_indv, samples = parse_filters_BOLT(file_prefix, chromosome, genes, snp_gene_map)
        sample_table = check_vcf_stats(poss_indv, samples)

        # STAAR fails sometimes for unknown reasons, so try it twice if it fails before throwing the entire process
        try:
            STAARParser(file_prefix, chromosome).parse_filters_STAAR()
        except STAARMergingException:
            LOGGER.warning(f'STAAR chr {chromosome} failed to merge, trying again...')
            STAARParser(file_prefix, chromosome).parse_filters_STAAR()

        # Purge files that we no longer need:
        Path(f'{file_prefix}.{chromosome}.bgen').unlink()
        Path(f'{file_prefix}.{chromosome}.bgen.bgi').unlink()
        Path(f'{file_prefix}.{chromosome}.parsed.txt').unlink()
        Path(f'{file_prefix}.{chromosome}.snps').unlink()

        LOGGER.info(f'Finished bgen: chr{chromosome}.filtered.bgen')
        return num_variants, chromosome, sample_table


def run_filtering(bgenprefix: str, chromosome: str, file_prefix: str, cmd_exec: CommandExecutor) -> int:
    """A wrapper method around bgenix to filter WES .bgen files to variants as requested by SNPListGenerator

    This class will take a set of SNPs, hardcoded in this applet into the file 'include_snps.txt', and filter the
    provided bgen files down to only this set of SNPs in bgenv1.2, 'ref-last', 8-bit format. This class also creates
    a companion .sample file, a new .bgi index, and calculates the total number of variants parsed by the class.

    :param bgenprefix: The prefix name of the bgen file. Will often be identical to `chromosome`, but is included as a
        separate parameter to ensure compatibility with potential other data sources.
    :param chromosome: The chromosome currently being processed. This must be the short form of the chromosome name
        (e.g., '1' not 'chr1').
    :param cmd_exec: A CommandExecutor instance to run commands on the Docker container.
    :param file_prefix: The prefix provided at runtime for the final output name.

    :return: Total number of variants passing provided filters for this chromosome
    """

    # Simple bgenix command that includes variants from the filtering expression and just outputs a new "filtered"
    # bgen file
    cmd = f'bgenix -g /test/{bgenprefix}.bgen -incl-rsids /test/include_snps.txt > {file_prefix}.{chromosome}.bgen'
    cmd_exec.run_cmd_on_docker(cmd)

    cmd = f'cp {bgenprefix}.sample {file_prefix}.{chromosome}.sample'
    cmd_exec.run_cmd(cmd)

    cmd = f'bgenix -index -g /test/{file_prefix}.{chromosome}.bgen'
    cmd_exec.run_cmd_on_docker(cmd)

    # This just helps to get the total number of variants:
    cmd = f'bgenix -list -g /test/{file_prefix}.{chromosome}.bgen > {file_prefix}.{chromosome}.snps'
    cmd_exec.run_cmd_on_docker(cmd)

    total_vars = 0
    with Path(f'{file_prefix}.{chromosome}.snps').open('r') as snp_file:
        for line in snp_file:
            line = line.rstrip()
            if '#' not in line and 'alternate_ids' not in line:
                total_vars += 1

    return total_vars
